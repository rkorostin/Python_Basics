def check_queens(arr):
    """
    Функция принимает в качестве аргумента список arr, представляющий расположение ферзей на шахматной
    доске. Каждый элемент списка arr представляет пару координат (x, y), где x - номер строки,
    а y - номер столбца, на котором расположен ферзь.
    Функция проверяет, является ли данное расположение ферзей валидным,
    то есть не находятся ли они под угрозой друг друга.
    Если все проверки пройдены успешно, функция возвращает True, что означает, что данное расположение
    ферзей является валидным. В противном случае, функция возвращает False.
    """
    # Создаем пустую шахматную доску размером 8x8
    # Восемь списков из восьми нулей.
    board = [[0] * 8 for _ in range(8)]

    # Расставляем ферзей на доске согласно списку arr. 1 - это ферзь, т. е. меняем 0 на 1.
    for i in range(8):
        row, col = arr[i]
        board[row - 1][col - 1] = 1  # Минус 1 - т. к. на входе числа от 1 до 8.

    # Для наглядности можно вывести доску, на которой нули - это пустая ячейка, а 1 - это ферзь.
    # for row in board:
    #     print(row)

    # Проверяем каждую строку и столбец на наличие более одного ферзя
    for i in range(8):
        # Проверка строки (горизонталь) - если больше 1, значит несколько ферзей
        if sum(board[i]) > 1:
            return False

        # Проверка столбца (вертикаль), аналогично, если больше 1, значит несколько ферзей
        column = [board[j][i] for j in range(8)]
        if sum(column) > 1:
            return False

    # Проверяем диагонали на наличие более одного ферзя.
    # Запускаем двойной цикл по переменным i и j, которые представляют индексы элементов в двумерном списке board.
    # Если значение элемента равно 1, то это означает, что в данной клетке находится ферзь.
    for i in range(8):
        for j in range(8):
            if board[i][j] == 1:
                # Проверка главной диагонали.
                # Добавляем счётчик count со значением 0, который будет считать ферзей
                # Затем в цикле с помощью переменных x и y происходит движение по главной диагонали
                # вверх и вниз от текущего положения ферзя. Если в какой-то клетке находится ферзь
                # (значение элемента равно 1), то значение переменной count увеличивается на 1.
                # После этого происходит движение по главной диагонали в противоположном направлении.
                # Если в результате сумма значений переменной count становится больше 1,
                # то это означает, что на главной диагонали есть более одного ферзя,
                # и функция возвращает False
                count = 0
                x, y = i, j
                while x >= 0 and y >= 0:
                    if board[x][y] == 1:
                        count += 1
                    x -= 1
                    y -= 1
                x, y = i + 1, j + 1
                while x < 8 and y < 8:
                    if board[x][y] == 1:
                        count += 1
                    x += 1
                    y += 1
                if count > 1:
                    return False

                # Аналогично проверяется побочная диагональ.
                count = 0
                x, y = i, j
                while x >= 0 and y < 8:
                    if board[x][y] == 1:
                        count += 1
                    x -= 1
                    y += 1
                x, y = i + 1, j - 1
                while x < 8 and y >= 0:
                    if board[x][y] == 1:
                        count += 1
                    x += 1
                    y -= 1
                if count > 1:
                    return False
    # Если после всех проверок False ни разу не вернулся, то возвращаем True.
    # Это будет означать, что ферзи расставлены таким образом, что не угрожают друг другу.
    return True
